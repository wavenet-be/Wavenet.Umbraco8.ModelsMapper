<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Wavenet.Umbraco8.ModelsMapper</name>
    </assembly>
    <members>
        <member name="T:Wavenet.Umbraco8.ModelsMapper.ComponentModel.HtmlStringConverter">
            <summary>
            HtmlString type converter.
            </summary>
            <seealso cref="T:System.ComponentModel.TypeConverter" />
        </member>
        <member name="P:Wavenet.Umbraco8.ModelsMapper.ComponentModel.HtmlStringConverter.Constructor">
            <summary>
            Gets or sets the constructor.
            </summary>
            <value>
            The constructor.
            </value>
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.ComponentModel.HtmlStringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.ComponentModel.HtmlStringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Wavenet.Umbraco8.ModelsMapper.Composing.BaseModelsMappingComposer">
            <summary>
            Base class for document type mapping.
            </summary>
            <seealso cref="T:Umbraco.Core.Composing.IUserComposer" />
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.Composing.BaseModelsMappingComposer.Compose(Umbraco.Core.Composing.Composition)">
            <inheritdoc />
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.Composing.BaseModelsMappingComposer.Map(Wavenet.Umbraco8.ModelsMapper.ModelMappingCollectionBuilder)">
            <summary>
            Maps document types.
            </summary>
            <param name="mapping">The model mapping collection builder.</param>
        </member>
        <member name="T:Wavenet.Umbraco8.ModelsMapper.Composing.ModelsMapperComposer">
            <summary>
            Setup ModelsMapper.
            </summary>
            <seealso cref="T:Umbraco.Core.Composing.ICoreComposer" />
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.Composing.ModelsMapperComposer.Compose(Umbraco.Core.Composing.Composition)">
            <inheritdoc />
        </member>
        <member name="T:Wavenet.Umbraco8.ModelsMapper.Configuration.ModelsMapperConfig">
            <summary>
            Models mapper has all its configuration hardcoded.
            This class is only there to activate built-in functionnality required by the library.
            </summary>
            <seealso cref="T:Umbraco.ModelsBuilder.Embedded.Configuration.IModelsBuilderConfig" />
        </member>
        <member name="P:Wavenet.Umbraco8.ModelsMapper.Configuration.ModelsMapperConfig.AcceptUnsafeModelsDirectory">
            <inheritdoc />
        </member>
        <member name="P:Wavenet.Umbraco8.ModelsMapper.Configuration.ModelsMapperConfig.DebugLevel">
            <inheritdoc />
        </member>
        <member name="P:Wavenet.Umbraco8.ModelsMapper.Configuration.ModelsMapperConfig.Enable">
            <inheritdoc />
        </member>
        <member name="P:Wavenet.Umbraco8.ModelsMapper.Configuration.ModelsMapperConfig.EnableFactory">
            <inheritdoc />
        </member>
        <member name="P:Wavenet.Umbraco8.ModelsMapper.Configuration.ModelsMapperConfig.FlagOutOfDateModels">
            <inheritdoc />
        </member>
        <member name="P:Wavenet.Umbraco8.ModelsMapper.Configuration.ModelsMapperConfig.IsDebug">
            <inheritdoc />
        </member>
        <member name="P:Wavenet.Umbraco8.ModelsMapper.Configuration.ModelsMapperConfig.ModelsDirectory">
            <inheritdoc />
        </member>
        <member name="P:Wavenet.Umbraco8.ModelsMapper.Configuration.ModelsMapperConfig.ModelsMode">
            <inheritdoc />
        </member>
        <member name="P:Wavenet.Umbraco8.ModelsMapper.Configuration.ModelsMapperConfig.ModelsNamespace">
            <inheritdoc />
        </member>
        <member name="T:Wavenet.Umbraco8.ModelsMapper.MappingGridExpressionExtensions">
            <summary>
            Extension class for <see cref="T:Wavenet.Umbraco8.ModelsMapper.MappingExpression`2"/> for grid implementations.
            </summary>
        </member>
        <member name="P:Wavenet.Umbraco8.ModelsMapper.MappingGridExpressionExtensions.ViewRenderer">
            <summary>
            Gets the view renderer.
            </summary>
            <value>
            The view renderer.
            </value>
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.MappingGridExpressionExtensions.ForGridMember``2(Wavenet.Umbraco8.ModelsMapper.MappingExpression{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.String)">
            <summary>
            Defines the mapping for the specified <paramref name="member" />.
            </summary>
            <typeparam name="TDocumentType">The type of the document type.</typeparam>
            <typeparam name="TPublishedElement">The type of the published element.</typeparam>
            <param name="mapping">The mapping.</param>
            <param name="member">The member.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>
            The current mapping.
            </returns>
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.MappingGridExpressionExtensions.ForGridMember``3(Wavenet.Umbraco8.ModelsMapper.MappingExpression{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.String)">
            <summary>
            Defines the mapping for the specified <paramref name="member" />.
            </summary>
            <typeparam name="TDocumentType">The type of the document type.</typeparam>
            <typeparam name="TPublishedElement">The type of the published element.</typeparam>
            <typeparam name="TMember">The type of the member.</typeparam>
            <param name="mapping">The mapping.</param>
            <param name="member">The member.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>
            The current mapping.
            </returns>
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.MappingGridExpressionExtensions.ForGridMember``2(Wavenet.Umbraco8.ModelsMapper.MappingExpression{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Web.IHtmlString}},System.String)">
            <summary>
            Defines the mapping for the specified <paramref name="member" />.
            </summary>
            <typeparam name="TDocumentType">The type of the document type.</typeparam>
            <typeparam name="TPublishedElement">The type of the published element.</typeparam>
            <param name="mapping">The mapping.</param>
            <param name="member">The member.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>
            The current mapping.
            </returns>
        </member>
        <member name="T:Wavenet.Umbraco8.ModelsMapper.MappingHtmlStringExtensions">
            <summary>
            Extension class for <see cref="T:Wavenet.Umbraco8.ModelsMapper.ModelMappingCollectionBuilder"/> for HTML String interfaces.
            </summary>
        </member>
        <member name="F:Wavenet.Umbraco8.ModelsMapper.MappingHtmlStringExtensions.DefinedTypes">
            <summary>
            The defined types.
            </summary>
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.MappingHtmlStringExtensions.DefineHtmlString``1(Wavenet.Umbraco8.ModelsMapper.ModelMappingCollectionBuilder)">
            <summary>
            Defines an HTML string interface.
            </summary>
            <typeparam name="THtmlString">The type of the HTML string.</typeparam>
            <param name="mapping">The mapping.</param>
            <returns>
            This builder.
            </returns>
            <exception cref="T:System.ArgumentException">
            THtmlString should be an interface.
            or
            THtmlString may only define one method: \"string ToHtmlString()\".
            or
            THtmlString may only define one property: \"string Html { get; }\".
            </exception>
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.MappingHtmlStringExtensions.IsDefined(System.Type)">
            <summary>
            Determines whether the specified type is defined.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if the specified type is defined; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Wavenet.Umbraco8.ModelsMapper.MappingMethodExpressionExtensions">
            <summary>
            Extension class for <see cref="T:Wavenet.Umbraco8.ModelsMapper.MappingExpression`2"/> for method implementations.
            </summary>
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.MappingMethodExpressionExtensions.ForMember``3(Wavenet.Umbraco8.ModelsMapper.MappingExpression{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Func{``2}}},System.Func{``1,``2})">
            <summary>
            Defines the mapping for the specified <paramref name="member" />.
            </summary>
            <typeparam name="TDocumentType">The type of the document type.</typeparam>
            <typeparam name="TPublishedElement">The type of the published element.</typeparam>
            <typeparam name="TMember">The type of the member.</typeparam>
            <param name="mapping">The mapping.</param>
            <param name="member">The member to map.</param>
            <param name="implementation">The mapping implementation.</param>
            <returns>
            The current mapping.
            </returns>
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.MappingMethodExpressionExtensions.ForMember``4(Wavenet.Umbraco8.ModelsMapper.MappingExpression{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Func{``3,``2}}},System.Func{``1,``3,``2})">
            <summary>
            Defines the mapping for the specified <paramref name="member" />.
            </summary>
            <typeparam name="TDocumentType">The type of the document type.</typeparam>
            <typeparam name="TPublishedElement">The type of the published element.</typeparam>
            <typeparam name="TMember">The type of the member.</typeparam>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="mapping">The mapping.</param>
            <param name="member">The member to map.</param>
            <param name="implementation">The mapping implementation.</param>
            <returns>
            The current mapping.
            </returns>
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.MappingMethodExpressionExtensions.ForMember``5(Wavenet.Umbraco8.ModelsMapper.MappingExpression{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Func{``3,``4,``2}}},System.Func{``1,``3,``4,``2})">
            <summary>
            Defines the mapping for the specified <paramref name="member" />.
            </summary>
            <typeparam name="TDocumentType">The type of the document type.</typeparam>
            <typeparam name="TPublishedElement">The type of the published element.</typeparam>
            <typeparam name="TMember">The type of the member.</typeparam>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <param name="mapping">The mapping.</param>
            <param name="member">The member to map.</param>
            <param name="implementation">The mapping implementation.</param>
            <returns>
            The current mapping.
            </returns>
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.MappingMethodExpressionExtensions.ForMember``6(Wavenet.Umbraco8.ModelsMapper.MappingExpression{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Func{``3,``4,``5,``2}}},System.Func{``1,``3,``4,``5,``2})">
            <summary>
            Defines the mapping for the specified <paramref name="member" />.
            </summary>
            <typeparam name="TDocumentType">The type of the document type.</typeparam>
            <typeparam name="TPublishedElement">The type of the published element.</typeparam>
            <typeparam name="TMember">The type of the member.</typeparam>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the thrid parameter.</typeparam>
            <param name="mapping">The mapping.</param>
            <param name="member">The member to map.</param>
            <param name="implementation">The mapping implementation.</param>
            <returns>
            The current mapping.
            </returns>
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.MappingMethodExpressionExtensions.ForMethodCall``2(Wavenet.Umbraco8.ModelsMapper.MappingExpression{``0,``1},System.Linq.Expressions.LambdaExpression,System.Delegate)">
            <summary>
            Defines the mapping for the specified <paramref name="member" />.
            </summary>
            <typeparam name="TDocumentType">The type of the document type.</typeparam>
            <typeparam name="TPublishedElement">The type of the published element.</typeparam>
            <param name="mapping">The mapping.</param>
            <param name="member">The member to map.</param>
            <param name="implementation">The mapping implementation.</param>
            <returns>
            The current mapping.
            </returns>
            <exception cref="T:System.ArgumentException">Member should be a method expression like: i =&gt; i.Method.</exception>
        </member>
        <member name="T:Wavenet.Umbraco8.ModelsMapper.Extensions.ReflectionExtensions">
            <summary>
            Contains method helper for reflection.
            </summary>
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.Extensions.ReflectionExtensions.GetAllMethods(System.Type)">
            <summary>
            Gets all methods the specified <paramref name="type"/> has which incudes methods defined in ancestors.
            </summary>
            <param name="type">The type.</param>
            <returns>All methods the specified <paramref name="type"/> has.</returns>
        </member>
        <member name="T:Wavenet.Umbraco8.ModelsMapper.Extensions.ValueExtension">
            <summary>
            <see cref="T:Wavenet.Umbraco8.ModelsMapper.Extensions.ValueExtension"/> is an extension helper to simplify the builtin Value extension method.
            </summary>
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.Extensions.ValueExtension.EnumerableValue``2(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Gets the value of a content's property identified by its alias.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TItem">The type of the item.</typeparam>
            <param name="content">The content.</param>
            <param name="propertyAlias">The property alias.</param>
            <returns>The value of the content's property identified by the alias.</returns>
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.Extensions.ValueExtension.EnumerableValue``2(Umbraco.Core.Models.PublishedContent.IPublishedElement,System.String)">
            <summary>
            Gets the value of a content's property identified by its alias.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TItem">The type of the item.</typeparam>
            <param name="element">The element.</param>
            <param name="propertyAlias">The property alias.</param>
            <returns>The value of the content's property identified by the alias.</returns>
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.Extensions.ValueExtension.Value``1(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Gets the value of a content's property identified by its alias.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="content">The content.</param>
            <param name="propertyAlias">The property alias.</param>
            <returns>The value of the content's property identified by the alias.</returns>
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.Extensions.ValueExtension.Value``1(Umbraco.Core.Models.PublishedContent.IPublishedElement,System.String)">
            <summary>
            Gets the value of a content's property identified by its alias.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="element">The element.</param>
            <param name="propertyAlias">The property alias.</param>
            <returns>The value of the content's property identified by the alias.</returns>
        </member>
        <member name="T:Wavenet.Umbraco8.ModelsMapper.Helpers.IViewRenderer">
            <summary>
            <see cref="T:Wavenet.Umbraco8.ModelsMapper.Helpers.IViewRenderer"/> allows you to render an Umbraco grid without the view context.
            </summary>
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.Helpers.IViewRenderer.GetGridHtml(System.Object)">
            <summary>
            Gets the grid HTML.
            </summary>
            <param name="gridModel">The grid model.</param>
            <returns>
            The grid HTML.
            </returns>
        </member>
        <member name="T:Wavenet.Umbraco8.ModelsMapper.Helpers.ViewRenderer">
            <summary>
            <see cref="T:Wavenet.Umbraco8.ModelsMapper.Helpers.ViewRenderer"/>.
            </summary>
        </member>
        <member name="F:Wavenet.Umbraco8.ModelsMapper.Helpers.ViewRenderer.context">
            <summary>
            Gets the context.
            </summary>
            <value>
            The context.
            </value>
        </member>
        <member name="F:Wavenet.Umbraco8.ModelsMapper.Helpers.ViewRenderer.disposedValue">
            <summary>
            Indicates if this instance is disposed.
            </summary>
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.Helpers.ViewRenderer.#ctor(Umbraco.Web.Routing.IPublishedRouter,Umbraco.Web.IUmbracoContextAccessor)">
            <summary>
            Initializes a new instance of the <see cref="T:Wavenet.Umbraco8.ModelsMapper.Helpers.ViewRenderer" /> class.
            </summary>
            <param name="publishedRouter">The published router.</param>
            <param name="umbracoContextAccessor">The umbraco context accessor.</param>
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.Helpers.ViewRenderer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.Helpers.ViewRenderer.GetGridHtml(System.Object)">
            <summary>
            Gets the grid HTML.
            </summary>
            <param name="gridModel">The grid model.</param>
            <returns>
            The grid HTML.
            </returns>
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.Helpers.ViewRenderer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Wavenet.Umbraco8.ModelsMapper.Internal.BaseHtmlString">
            <summary>
            Base class for HTML strings.
            </summary>
            <seealso cref="T:System.Web.IHtmlString" />
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.Internal.BaseHtmlString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Wavenet.Umbraco8.ModelsMapper.Internal.BaseHtmlString"/> class.
            </summary>
            <param name="html">The HTML.</param>
        </member>
        <member name="P:Wavenet.Umbraco8.ModelsMapper.Internal.BaseHtmlString.Html">
            <summary>
            Gets the HTML.
            </summary>
            <value>
            The HTML.
            </value>
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.Internal.BaseHtmlString.ToHtmlString">
            <inheritdoc />
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.Internal.BaseHtmlString.ToString">
            <inheritdoc />
        </member>
        <member name="T:Wavenet.Umbraco8.ModelsMapper.Internal.IModelMapper">
            <summary>
            Internal interface used to determine if a class is generated by ModelsMapper.
            </summary>
        </member>
        <member name="T:Wavenet.Umbraco8.ModelsMapper.MappingExpression`2">
            <summary>
              <see cref="T:Wavenet.Umbraco8.ModelsMapper.MappingExpression`2" /> allows you to define the mapping for a Model.
            </summary>
            <typeparam name="TDocumentType">The type of the document type.</typeparam>
            <typeparam name="TPublishedElement">The type of the published element.</typeparam>
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.MappingExpression`2.#ctor(Wavenet.Umbraco8.ModelsMapper.ModelMap)">
            <summary>
            Initializes a new instance of the <see cref="T:Wavenet.Umbraco8.ModelsMapper.MappingExpression`2"/> class.
            </summary>
            <param name="modelMap">The model map.</param>
        </member>
        <member name="P:Wavenet.Umbraco8.ModelsMapper.MappingExpression`2.ModelMap">
            <summary>
            Gets the model map.
            </summary>
            <value>
            The model map.
            </value>
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.MappingExpression`2.ForMember``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{`1,``0})">
            <summary>
            Defines the mapping for the specified <paramref name="member"/>.
            </summary>
            <typeparam name="TMember">The type of the member.</typeparam>
            <param name="member">The member to map.</param>
            <param name="implementation">The mapping implementation.</param>
            <returns>The current mapping.</returns>
            <exception cref="T:System.ArgumentException">Member should be a property expression like: i => i.Property.</exception>
        </member>
        <member name="T:Wavenet.Umbraco8.ModelsMapper.MissingImplementationFactory">
            <summary>
            This factory create a <see cref="T:System.Func`2"/> for a property without Umbraco or mapping information.
            </summary>
        </member>
        <member name="F:Wavenet.Umbraco8.ModelsMapper.MissingImplementationFactory.Implementation">
            <summary>
            The implementation.
            </summary>
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.MissingImplementationFactory.GetDefaultImplementation(System.Type,System.Type)">
            <summary>
            Gets the default implementation.
            </summary>
            <param name="returnType">Type of the return.</param>
            <param name="publishedType">Type of the published.</param>
            <returns>
            The default implementation.
            </returns>
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.MissingImplementationFactory.EmptyImplementation``1(Umbraco.Core.Models.PublishedContent.IPublishedElement)">
            <summary>
            Empty implementation.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="element">The element.</param>
            <returns>The default value of <typeparamref name="TResult"/>.</returns>
        </member>
        <member name="T:Wavenet.Umbraco8.ModelsMapper.ModelMap">
            <summary>
            This class map an Umbraco DocumentType to a .net interface.
            </summary>
        </member>
        <member name="F:Wavenet.Umbraco8.ModelsMapper.ModelMap.forAllModelMaps">
            <summary>
            For all model maps.
            </summary>
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.ModelMap.#ctor(System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Wavenet.Umbraco8.ModelsMapper.ModelMap" /> class.
            </summary>
            <param name="type">The type.</param>
            <param name="isForAll">Determines if this map is for all interface that extends the specified <paramref name="type"/>.</param>
            <exception cref="T:System.NotSupportedException">The type: \"{type.FullName}\" is not an interface.</exception>
        </member>
        <member name="P:Wavenet.Umbraco8.ModelsMapper.ModelMap.Ctor">
            <summary>
            Gets the ctor.
            </summary>
            <value>
            The ctor.
            </value>
        </member>
        <member name="P:Wavenet.Umbraco8.ModelsMapper.ModelMap.Implementations">
            <summary>
            Gets the implementations.
            </summary>
            <value>
            The implementations.
            </value>
        </member>
        <member name="P:Wavenet.Umbraco8.ModelsMapper.ModelMap.IsForAll">
            <summary>
            Gets a value indicating whether this instance is for all interfaces which extends this type.
            </summary>
            <value>
              <c>true</c> if this instance is for all interfaces which extends this type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Wavenet.Umbraco8.ModelsMapper.ModelMap.MissingImplementations">
            <summary>
            Gets the missing implementation.
            </summary>
            <value>
            The missing implementations.
            </value>
        </member>
        <member name="P:Wavenet.Umbraco8.ModelsMapper.ModelMap.Type">
            <summary>
            Gets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Wavenet.Umbraco8.ModelsMapper.ModelMap.GeneratedType">
            <summary>
            Gets or sets the type of the generated.
            </summary>
            <value>
            The type of the generated.
            </value>
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.ModelMap.Build(Umbraco.Core.Models.IContentTypeComposition,System.Collections.Generic.IDictionary{System.Type,Wavenet.Umbraco8.ModelsMapper.ModelMap})">
            <summary>
            Builds the specified content type.
            </summary>
            <param name="contentType">Type of the content.</param>
            <param name="forAllModelMaps">For all model maps.</param>
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.ModelMap.GetImplementationFieldName(System.Reflection.MemberInfo)">
            <summary>
            Gets the name of the implementation field.
            </summary>
            <param name="member">The member.</param>
            <returns>The name of the implementation field.</returns>
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.ModelMap.GetValueMethod(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Gets the value method for .
            </summary>
            <param name="iPublishType">Type of the i publish.</param>
            <param name="propertyInfo">The property information.</param>
            <returns>
            The appropriate Value method for the specified <paramref name="propertyInfo" />.
            </returns>
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.ModelMap.BuildConstructor(System.Reflection.Emit.TypeBuilder)">
            <summary>
            Builds the constructor.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.ModelMap.TryGetImplementation(System.Reflection.MemberInfo,System.Delegate@)">
            <summary>
            Tries to get the specified <paramref name="member"/> implementation.
            </summary>
            <param name="member">The member.</param>
            <param name="implementation">The implementation.</param>
            <returns><c>True</c> if an implementation is found otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Wavenet.Umbraco8.ModelsMapper.ModelMappingCollection">
            <summary>
            The collection of model mappings.
            </summary>
            <seealso cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" />
            <seealso cref="T:Umbraco.Core.Composing.IBuilderCollection`1" />
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.ModelMappingCollection.#ctor(System.Collections.Generic.IDictionary{System.String,Wavenet.Umbraco8.ModelsMapper.ModelMap},Umbraco.Core.Services.IContentTypeService,Umbraco.Core.Services.IMediaTypeService)">
            <summary>
            Initializes a new instance of the <see cref="T:Wavenet.Umbraco8.ModelsMapper.ModelMappingCollection" /> class.
            </summary>
            <param name="list">The list.</param>
            <param name="contentTypeService">The content type service.</param>
            <param name="mediaTypeService">The media type service.</param>
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.ModelMappingCollection.System#Collections#Generic#IEnumerable{Wavenet#Umbraco8#ModelsMapper#ModelMap}#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Wavenet.Umbraco8.ModelsMapper.ModelMappingCollectionBuilder">
            <summary>
            <see cref="T:Wavenet.Umbraco8.ModelsMapper.ModelMappingCollection"/> Builder.
            </summary>
            <seealso cref="T:Umbraco.Core.Composing.ICollectionBuilder`2" />
        </member>
        <member name="F:Wavenet.Umbraco8.ModelsMapper.ModelMappingCollectionBuilder.maps">
            <summary>
            The maps.
            </summary>
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.ModelMappingCollectionBuilder.Umbraco#Core#Composing#ICollectionBuilder{Wavenet#Umbraco8#ModelsMapper#ModelMappingCollection,Wavenet#Umbraco8#ModelsMapper#ModelMap}#CreateCollection(Umbraco.Core.Composing.IFactory)">
            <inheritdoc />
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.ModelMappingCollectionBuilder.DefineElementMap``1(System.String,System.Action{Wavenet.Umbraco8.ModelsMapper.MappingExpression{``0,Umbraco.Core.Models.PublishedContent.IPublishedElement}})">
            <summary>
            Defines mapping for the specified <paramref name="documentTypeAlias" />.
            </summary>
            <typeparam name="TDocumentType">The type of the elemnt type.</typeparam>
            <param name="documentTypeAlias">The document type alias.</param>
            <param name="configuration">The configuration.</param>
            <returns>This builder.</returns>
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.ModelMappingCollectionBuilder.DefineMap``1(System.String,System.Action{Wavenet.Umbraco8.ModelsMapper.MappingExpression{``0,Umbraco.Core.Models.PublishedContent.IPublishedContent}})">
            <summary>
            Defines mapping for the specified <paramref name="documentTypeAlias" />.
            </summary>
            <typeparam name="TDocumentType">The type of the document type.</typeparam>
            <param name="documentTypeAlias">The document type alias.</param>
            <param name="configuration">The configuration.</param>
            <returns>This builder.</returns>
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.ModelMappingCollectionBuilder.DefineMapForAll``1(System.Action{Wavenet.Umbraco8.ModelsMapper.MappingExpression{``0,Umbraco.Core.Models.PublishedContent.IPublishedContent}})">
            <summary>
            Defines a base mapping for all document types which extends the specified <typeparamref name="TDocumentType"/>.
            </summary>
            <typeparam name="TDocumentType">The type of the document type.</typeparam>
            <param name="configuration">The configuration.</param>
            <returns>This builder.</returns>
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.ModelMappingCollectionBuilder.Umbraco#Core#Composing#ICollectionBuilder#RegisterWith(Umbraco.Core.Composing.IRegister)">
            <inheritdoc />
        </member>
        <member name="T:Wavenet.Umbraco8.ModelsMapper.PublishedModelFactory">
            <summary>
            This factory will serve all the mapping defined in the application.
            </summary>
            <seealso cref="T:Umbraco.Core.Models.PublishedContent.ILivePublishedModelFactory" />
            <seealso cref="T:Umbraco.Core.Models.PublishedContent.IPublishedModelFactory" />
        </member>
        <member name="F:Wavenet.Umbraco8.ModelsMapper.PublishedModelFactory.contentTypeService">
            <summary>
            The content type service.
            </summary>
        </member>
        <member name="F:Wavenet.Umbraco8.ModelsMapper.PublishedModelFactory.mediaTypeService">
            <summary>
            The media service.
            </summary>
        </member>
        <member name="F:Wavenet.Umbraco8.ModelsMapper.PublishedModelFactory.models">
            <summary>
            The models.
            </summary>
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.PublishedModelFactory.#ctor(Wavenet.Umbraco8.ModelsMapper.ModelMappingCollection,Umbraco.Core.Services.IContentTypeService,Umbraco.Core.Services.IMediaTypeService)">
            <summary>
            Initializes a new instance of the <see cref="T:Wavenet.Umbraco8.ModelsMapper.PublishedModelFactory" /> class.
            </summary>
            <param name="models">The models.</param>
            <param name="contentTypeService">The content type service.</param>
            <param name="mediaTypeService">The media type service.</param>
        </member>
        <member name="P:Wavenet.Umbraco8.ModelsMapper.PublishedModelFactory.Enabled">
            <inheritdoc />
        </member>
        <member name="P:Wavenet.Umbraco8.ModelsMapper.PublishedModelFactory.SyncRoot">
            <inheritdoc />
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.PublishedModelFactory.CreateModel(Umbraco.Core.Models.PublishedContent.IPublishedElement)">
            <inheritdoc />
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.PublishedModelFactory.CreateModelList(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.PublishedModelFactory.MapModelType(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.PublishedModelFactory.Refresh">
            <inheritdoc />
        </member>
        <member name="M:Wavenet.Umbraco8.ModelsMapper.PublishedModelFactory.Reset">
            <inheritdoc />
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>
                Specifies that <see langword="null"/> is allowed as an input even if the
                corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.AllowNullAttribute.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>
                Specifies that <see langword="null"/> is disallowed as an input even if the
                corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DisallowNullAttribute.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>
                Specifies that a method that will never return under any circumstance.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute.#ctor">
             <summary>
                 Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute"/> class.
             </summary>
            
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
                Specifies that the method will not return if the associated <see cref="T:System.Boolean"/>
                parameter is passed the specified value.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
                Gets the condition parameter value.
                Code after the method is considered unreachable by diagnostics if the argument
                to the associated parameter matches this value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute"/>
                class with the specified parameter value.
            </summary>
            <param name="parameterValue">
                The condition parameter value.
                Code after the method is considered unreachable by diagnostics if the argument
                to the associated parameter matches this value.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>
                Specifies that an output may be <see langword="null"/> even if the
                corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullAttribute.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
                Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, 
                the parameter may be <see langword="null"/> even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
                Gets the return value condition.
                If the method returns this value, the associated parameter may be <see langword="null"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
                 Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">
                The return value condition.
                If the method returns this value, the associated parameter may be <see langword="null"/>.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
                Specifies that the method or property will ensure that the listed field and property members have
                not-<see langword="null"/> values.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
                Gets field or property member names.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
                Initializes the attribute with a field or property member.
            </summary>
            <param name="member">
                The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
                Initializes the attribute with the list of field and property members.
            </summary>
            <param name="members">
                The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
                Specifies that the method or property will ensure that the listed field and property members have
                non-<see langword="null"/> values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
                Gets the return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>
                Gets field or property member names.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
                Initializes the attribute with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">
                The return value condition. If the method returns this value,
                the associated parameter will not be <see langword="null"/>.
            </param>
            <param name="member">
                The field or property member that is promised to be not-<see langword="null"/>.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
                Initializes the attribute with the specified return value condition and list
                of field and property members.
            </summary>
            <param name="returnValue">
                The return value condition. If the method returns this value,
                the associated parameter will not be <see langword="null"/>.
            </param>
            <param name="members">
                The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
                Specifies that an output is not <see langword="null"/> even if the
                corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullAttribute.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.NotNullAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>
                Specifies that the output will be non-<see langword="null"/> if the
                named parameter is non-<see langword="null"/>.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>
                Gets the associated parameter name.
                The output will be non-<see langword="null"/> if the argument to the
                parameter specified is non-<see langword="null"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
                Initializes the attribute with the associated parameter name.
            </summary>
            <param name="parameterName">
                The associated parameter name.
                The output will be non-<see langword="null"/> if the argument to the
                parameter specified is non-<see langword="null"/>.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
                Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>,
                the parameter will not be <see langword="null"/> even if the corresponding type allows it.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>
                Gets the return value condition.
                If the method returns this value, the associated parameter will not be <see langword="null"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
                Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">
                The return value condition.
                If the method returns this value, the associated parameter will not be <see langword="null"/>.
            </param>
        </member>
    </members>
</doc>
